/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/Authentication/AuthenticateSLGUser": {
    post: {
      parameters: {
        query: {
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "text/plain": components["schemas"]["AuthenticationResult"];
            "application/json": components["schemas"]["AuthenticationResult"];
            "text/json": components["schemas"]["AuthenticationResult"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["AuthenticateSlgUser"];
          "text/json": components["schemas"]["AuthenticateSlgUser"];
          "application/*+json": components["schemas"]["AuthenticateSlgUser"];
        };
      };
    };
  };
  "/Authentication/AuthenticateSteamUser": {
    post: {
      parameters: {
        query: {
          steamTicket?: string;
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "text/plain": components["schemas"]["AuthenticationResult"];
            "application/json": components["schemas"]["AuthenticationResult"];
            "text/json": components["schemas"]["AuthenticationResult"];
          };
        };
      };
    };
  };
  "/Authentication/RefreshToken": {
    post: {
      parameters: {
        query: {
          refreshToken?: string;
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "text/plain": components["schemas"]["AuthenticationResult"];
            "application/json": components["schemas"]["AuthenticationResult"];
            "text/json": components["schemas"]["AuthenticationResult"];
          };
        };
        /** Forbidden */
        403: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Authentication/GetWorldTicket": {
    get: {
      parameters: {
        query: {
          serverId?: string;
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Authentication/VerifyWorldTicket": {
    get: {
      parameters: {
        query: {
          worldTicket?: string;
          expectedWorldId?: string;
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "text/plain": components["schemas"]["StrangeUser"];
            "application/json": components["schemas"]["StrangeUser"];
            "text/json": components["schemas"]["StrangeUser"];
          };
        };
      };
    };
  };
  "/s3/public/{documentName}": {
    get: {
      parameters: {
        path: {
          documentName: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/s3/release/{documentName}": {
    get: {
      parameters: {
        path: {
          documentName: string;
        };
        query: {
          token?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/s3/staging/{documentName}": {
    get: {
      parameters: {
        path: {
          documentName: string;
        };
        query: {
          token?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/s3/GameVersions": {
    get: {
      responses: {
        /** OK */
        200: {
          content: {
            "text/plain": components["schemas"]["GameVersion"][];
            "application/json": components["schemas"]["GameVersion"][];
            "text/json": components["schemas"]["GameVersion"][];
          };
        };
      };
    };
  };
  "/s3/build": {
    post: {
      responses: {
        /** OK */
        200: unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["GameVersion"];
          "text/json": components["schemas"]["GameVersion"];
          "application/*+json": components["schemas"]["GameVersion"];
        };
      };
    };
  };
  "/Flags/FlagServer": {
    post: {
      parameters: {
        query: {
          worldTicket?: string;
          problemDescription?: string;
          circumventingPaidItems?: boolean;
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/Flags/GetRecentlyFlaggedServers": {
    get: {
      parameters: {
        query: {
          days?: number;
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "text/plain": components["schemas"]["FlaggedServerSummary"][];
            "application/json": components["schemas"]["FlaggedServerSummary"][];
            "text/json": components["schemas"]["FlaggedServerSummary"][];
          };
        };
      };
    };
  };
  "/Flags/GetAllFlagsForServer/{worldId}": {
    get: {
      parameters: {
        path: {
          worldId: string;
        };
        query: {
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "text/plain": components["schemas"]["FlaggedServerSummary"];
            "application/json": components["schemas"]["FlaggedServerSummary"];
            "text/json": components["schemas"]["FlaggedServerSummary"];
          };
        };
      };
    };
  };
  "/Flags": {
    get: {
      parameters: {
        query: {
          pageNumber?: number;
          pageSize?: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
    put: {
      responses: {
        /** OK */
        200: unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["FlagReported"];
        };
      };
    };
  };
  "/Flags/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["FlagReported"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/Flags/search": {
    get: {
      parameters: {
        query: {
          search: string;
          pageNumber?: number;
          pageSize?: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["FlagReported"][];
          };
        };
      };
    };
  };
  "/Invites/GrantInvites": {
    get: {
      parameters: {
        query: {
          userid?: string;
          count?: number;
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/Invites/GetInivtes": {
    get: {
      parameters: {
        query: {
          userid?: string;
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "text/plain": string[];
            "application/json": string[];
            "text/json": string[];
          };
        };
      };
    };
  };
  "/Invites/RedeemInvite": {
    get: {
      parameters: {
        query: {
          inviteGuid?: string;
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/Marketplace/GetMarketplaceItems": {
    get: {
      parameters: {
        query: {
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "text/plain": components["schemas"]["MarketplaceItem"][];
            "application/json": components["schemas"]["MarketplaceItem"][];
            "text/json": components["schemas"]["MarketplaceItem"][];
          };
        };
      };
    };
  };
  "/Marketplace/GetGlobalData": {
    get: {
      parameters: {
        query: {
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "text/plain": components["schemas"]["StrangeCloudGlobalData"];
            "application/json": components["schemas"]["StrangeCloudGlobalData"];
            "text/json": components["schemas"]["StrangeCloudGlobalData"];
          };
        };
      };
    };
  };
  "/Marketplace/PutStoreItemsAdmin": {
    post: {
      parameters: {
        query: {
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
      requestBody: {
        content: {
          "text/plain": string;
        };
      };
    };
  };
  "/Marketplace/BuyAsAdmin": {
    post: {
      parameters: {
        query: {
          marketplaceItemName?: string;
          quantityMultiplier?: number;
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/Marketplace/StartStorePurchase": {
    post: {
      parameters: {
        query: {
          marketplaceItemName?: string;
          quantityMultiplier?: number;
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "text/plain": components["schemas"]["MarketplaceTransaction"];
            "application/json": components["schemas"]["MarketplaceTransaction"];
            "text/json": components["schemas"]["MarketplaceTransaction"];
          };
        };
      };
    };
  };
  "/Marketplace/CompleteStorePurchase": {
    post: {
      parameters: {
        query: {
          transactionId?: string;
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "text/plain": boolean;
            "application/json": boolean;
            "text/json": boolean;
          };
        };
      };
    };
  };
  "/PasswordReset/RequestReset": {
    post: {
      parameters: {
        query: {
          email?: string;
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/PasswordReset/ResetPassword": {
    post: {
      parameters: {
        query: {
          token?: string;
          newpassword?: string;
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/api/Registration/SetUsernameAndPassword": {
    post: {
      parameters: {
        query: {
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UsernameOrEmailAndPassword"];
          "text/json": components["schemas"]["UsernameOrEmailAndPassword"];
          "application/*+json": components["schemas"]["UsernameOrEmailAndPassword"];
        };
      };
    };
  };
  "/api/Registration/RegisterUser": {
    post: {
      parameters: {
        query: {
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "text/plain": components["schemas"]["AuthenticationResult"];
            "application/json": components["schemas"]["AuthenticationResult"];
            "text/json": components["schemas"]["AuthenticationResult"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UsernameOrEmailAndPassword"];
          "text/json": components["schemas"]["UsernameOrEmailAndPassword"];
          "application/*+json": components["schemas"]["UsernameOrEmailAndPassword"];
        };
      };
    };
  };
  "/api/Registration/VerifyEmail": {
    post: {
      parameters: {
        query: {
          verifyToken?: string;
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/api/Registration/LinkSteamAccount": {
    /** Details about Steam's OAuth flow can be found here https://partner.steamgames.com/doc/webapi_overview/oauth. */
    post: {
      parameters: {
        query: {
          token?: string;
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/api/Registration/RegisterWithSteam": {
    get: {
      parameters: {
        query: {
          token?: string;
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/Transactions": {
    get: {
      parameters: {
        query: {
          pageNumber?: number;
          pageSize?: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
    put: {
      responses: {
        /** OK */
        200: unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["MarketplaceTransaction"];
        };
      };
    };
  };
  "/Transactions/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["MarketplaceTransaction"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/Transactions/search": {
    get: {
      parameters: {
        query: {
          search: string;
          pageNumber?: number;
          pageSize?: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["MarketplaceTransaction"][];
          };
        };
      };
    };
  };
  "/UserAccount/SetAccount": {
    get: {
      parameters: {
        query: {
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["StrangeUser"];
          "text/json": components["schemas"]["StrangeUser"];
          "application/*+json": components["schemas"]["StrangeUser"];
        };
      };
    };
  };
  "/UserAccount/GetAccount": {
    get: {
      parameters: {
        query: {
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "text/plain": components["schemas"]["StrangeUser"];
            "application/json": components["schemas"]["StrangeUser"];
            "text/json": components["schemas"]["StrangeUser"];
          };
        };
      };
    };
  };
  "/UserAccount/SetAvatarData": {
    post: {
      parameters: {
        query: {
          avatarDna?: string;
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/UserAccount/GetUserSteamStatus": {
    get: {
      parameters: {
        query: {
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/UserAccount/GetTransactionSummaries": {
    get: {
      parameters: {
        query: {
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "text/plain": components["schemas"]["DailySummary"][];
            "application/json": components["schemas"]["DailySummary"][];
            "text/json": components["schemas"]["DailySummary"][];
          };
        };
      };
    };
  };
  "/UserAccount/GetAllTransactionSummaries": {
    get: {
      parameters: {
        query: {
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "text/plain": components["schemas"]["DailySummary"][];
            "application/json": components["schemas"]["DailySummary"][];
            "text/json": components["schemas"]["DailySummary"][];
          };
        };
      };
    };
  };
  "/UserAccount/GrantAchievements": {
    post: {
      parameters: {
        query: {
          userId?: string;
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["StrangeAchievement"][];
          "text/json": components["schemas"]["StrangeAchievement"][];
          "application/*+json": components["schemas"]["StrangeAchievement"][];
        };
      };
    };
  };
  "/UserAccount/GrantAchievement": {
    post: {
      parameters: {
        query: {
          userId?: string;
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["StrangeAchievement"];
          "text/json": components["schemas"]["StrangeAchievement"];
          "application/*+json": components["schemas"]["StrangeAchievement"];
        };
      };
    };
  };
  "/UserAccount/Heartbeat": {
    post: {
      parameters: {
        query: {
          worldId?: string;
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "text/plain": components["schemas"]["HearbeatResult"];
            "application/json": components["schemas"]["HearbeatResult"];
            "text/json": components["schemas"]["HearbeatResult"];
          };
        };
      };
    };
  };
  "/UserAccount": {
    get: {
      parameters: {
        query: {
          pageNumber?: number;
          pageSize?: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
    put: {
      responses: {
        /** OK */
        200: unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["StrangeUser"];
        };
      };
    };
  };
  "/UserAccount/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["StrangeUser"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/UserAccount/search": {
    get: {
      parameters: {
        query: {
          search: string;
          pageNumber?: number;
          pageSize?: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["StrangeUser"][];
          };
        };
      };
    };
  };
  "/Voice/VivoxLoginToken": {
    post: {
      parameters: {
        query: {
          vivoxId?: string;
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "text/plain": components["schemas"]["VoiceLoginTokenResult"];
            "application/json": components["schemas"]["VoiceLoginTokenResult"];
            "text/json": components["schemas"]["VoiceLoginTokenResult"];
          };
        };
      };
    };
  };
  "/Voice/VivoxJoinChannelToken": {
    post: {
      parameters: {
        query: {
          vivoxId?: string;
          channelName?: string;
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "text/plain": components["schemas"]["VoiceJoinTokenResult"];
            "application/json": components["schemas"]["VoiceJoinTokenResult"];
            "text/json": components["schemas"]["VoiceJoinTokenResult"];
          };
        };
      };
    };
  };
  "/Worlds/GetWorld": {
    get: {
      parameters: {
        query: {
          id?: string;
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "text/plain": components["schemas"]["StrangeWorldCloudData"];
            "application/json": components["schemas"]["StrangeWorldCloudData"];
            "text/json": components["schemas"]["StrangeWorldCloudData"];
          };
        };
      };
    };
  };
  "/Worlds/GetActiveWorlds": {
    get: {
      parameters: {
        query: {
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/Worlds/QuickUpdate": {
    post: {
      parameters: {
        query: {
          playerCount?: number;
          activePlayerCount?: number;
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
      requestBody: {
        content: {
          "application/json": string;
          "text/json": string;
          "application/*+json": string;
        };
      };
    };
  };
  "/Worlds/ServerHeartbeat": {
    post: {
      parameters: {
        query: {
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "text/plain": components["schemas"]["ServerHeartbeatResult"];
            "application/json": components["schemas"]["ServerHeartbeatResult"];
            "text/json": components["schemas"]["ServerHeartbeatResult"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ServerHeartbeatData"];
          "text/json": components["schemas"]["ServerHeartbeatData"];
          "application/*+json": components["schemas"]["ServerHeartbeatData"];
        };
      };
    };
  };
  "/Worlds/AddOrUpdate": {
    post: {
      parameters: {
        query: {
          "api-version"?: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "text/plain": components["schemas"]["StrangeWorldRegistrationResult"];
            "application/json": components["schemas"]["StrangeWorldRegistrationResult"];
            "text/json": components["schemas"]["StrangeWorldRegistrationResult"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["StrangeWorldCloudData"];
          "text/json": components["schemas"]["StrangeWorldCloudData"];
          "application/*+json": components["schemas"]["StrangeWorldCloudData"];
        };
      };
    };
  };
  "/Worlds": {
    get: {
      parameters: {
        query: {
          pageNumber?: number;
          pageSize?: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
    put: {
      responses: {
        /** OK */
        200: unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["StrangeWorldCloudData"];
        };
      };
    };
  };
  "/Worlds/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["StrangeWorldCloudData"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/Worlds/search": {
    get: {
      parameters: {
        query: {
          search: string;
          pageNumber?: number;
          pageSize?: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["StrangeWorldCloudData"][];
          };
        };
      };
    };
  };
}

export interface components {
  schemas: {
    AuthenticateSlgUser: {
      username?: string | null;
      password?: string | null;
    };
    AuthenticationResult: {
      token?: string | null;
      refreshToken?: string | null;
      strangeUser?: components["schemas"]["StrangeUser"];
    };
    /** @description Stores a summary of the amount of eco credits collected in tax each day on each world. */
    DailySummary: {
      /** Format: uuid */
      id?: string;
      /** Format: uuid */
      userID?: string | null;
      /** Format: uuid */
      worldID?: string | null;
      /** Format: date */
      date?: string;
      /** Format: float */
      totalCollected?: number;
      summaryType?: components["schemas"]["SummaryType"];
    };
    /** @description Info stored about a server in the cloud stroage db */
    FlagReported: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      reportTime?: string;
      /** Format: uuid */
      reportingUserID?: string;
      problemDescription?: string | null;
      /** Format: uuid */
      reportedWorldID?: string;
      /** Format: uuid */
      reportedUserID?: string;
      circumventingPaidItems?: boolean | null;
    };
    FlaggedServerSummary: {
      /** Format: uuid */
      worldID?: string;
      /** Format: int32 */
      flagCount?: number;
      recentProblems?: string[] | null;
    };
    GameVersion: {
      /** Format: uuid */
      id?: string;
      versionCategory?: string | null;
      versionNumber?: string | null;
      changeLog?: string | null;
      date?: string | null;
      commitNumber?: string | null;
    };
    HearbeatResult: {
      success?: boolean;
      reason?: string | null;
    };
    InvItem: {
      type?: string | null;
      /** Format: int32 */
      amount?: number;
      /** Format: uuid */
      serverBoughtOn?: string;
      /** Format: uuid */
      owningUserOfServerBoughtOn?: string;
    };
    MarketplaceItem: {
      entryName?: string | null;
      type?: string | null;
      displayName?: string | null;
      achievementRequired?: string | null;
      category?: string | null;
      /** Format: int32 */
      quantity?: number;
      /** Format: float */
      price?: number;
      realMoney?: boolean;
      /** Format: int32 */
      steamID?: number;
    };
    MarketplaceTransaction: {
      /** Format: uuid */
      id?: string;
      marketplaceItemName?: string | null;
      displayName?: string | null;
      steamOrderId?: string | null;
      steamTransactionId?: string | null;
      /** Format: uuid */
      purchaser?: string;
      purchaserSteamId?: string | null;
      /** Format: uuid */
      worldPurchasedOn?: string | null;
      /** Format: uuid */
      worldOwningUser?: string | null;
      /** Format: int32 */
      quantity?: number;
      /** Format: float */
      spentTotal?: number;
      /** Format: float */
      slgReceived?: number;
      /** Format: float */
      worldOwnerReceived?: number;
      /** Format: float */
      charityReceived?: number;
      realMoney?: boolean;
      badTransaction?: boolean;
      completed?: boolean;
      /** Format: date-time */
      timeCompleted?: string;
    };
    ServerHeartbeatData: {
      world?: components["schemas"]["StrangeWorldCloudData"];
      usersOnline?: string[] | null;
    };
    ServerHeartbeatResult: {
      result?: components["schemas"]["StrangeWorldRegistrationResult"];
      usersToKick?: components["schemas"]["UserToKick"][] | null;
    };
    StrangeAchievement: {
      name?: string | null;
      /** Format: uuid */
      worldSource?: string;
      worldName?: string | null;
      description?: string | null;
      /** Format: date-time */
      timeAchieved?: string | null;
    };
    StrangeCloudGlobalData: {
      /** Format: uuid */
      id?: string;
      /** Format: float */
      percentCutForHosts?: number;
      /** Format: float */
      percentCutForCharity?: number;
    };
    /** @description A user stored in the StrangeCloud. */
    StrangeUser: {
      isDeveloper?: boolean | null;
      /** Format: uuid */
      id?: string;
      steamId?: string | null;
      twitchId?: string | null;
      twitchUsername?: string | null;
      username?: string | null;
      avatarUrl?: string | null;
      avatarDna?: string | null;
      achievements?: components["schemas"]["StrangeAchievement"][] | null;
      /** Format: float */
      ecoCredits?: number | null;
      ownsEco?: boolean;
      verified?: boolean | null;
      items?: components["schemas"]["InvItem"][] | null;
      blockPurchasing?: boolean | null;
      isDevTier?: boolean | null;
      isWolfWhisperer?: boolean | null;
      isSLG?: boolean | null;
      isCloudAdmin?: boolean;
      /** Format: date-time */
      bannedUntil?: string | null;
      bannedReason?: string | null;
      isBanned?: boolean;
      /** Format: uuid */
      currentWorldID?: string | null;
      /** Format: date-time */
      lastWorldJoinTime?: string | null;
      /** Format: date-time */
      heartBeatTime?: string | null;
      /** Format: date-time */
      creationTime?: string;
      online?: boolean;
      /** Format: date-span */
      timeOnlineTotal?: string | null;
      /** Format: date-span */
      totalOnlineHostingTime?: string | null;
      /**
       * Format: date-span
       * @description Sum of all time played on all servers hosted by this user.
       */
      sumHostedUsersTime?: string | null;
      /** Format: date-time */
      lastEmailSent?: string | null;
    };
    /** @description Info stored about a server in the cloud stroage db */
    StrangeWorldCloudData: {
      /** Format: uuid */
      id?: string;
      name?: string | null;
      /** Format: uuid */
      owningUser?: string;
      /** Format: int32 */
      gameServerPort?: number;
      internalEndPoint?: string | null;
      remoteEndPoint?: string | null;
      isPublic?: boolean;
      /** Format: int32 */
      playerCount?: number;
      /** Format: int32 */
      activePlayerCount?: number;
      serverInfoJson?: string | null;
      online?: boolean;
      /** Format: int32 */
      adminAppliedScoreBoost?: number | null;
      isOfficial?: boolean | null;
      isEligibleForTax?: boolean | null;
      /** Format: date-span */
      timeOnline?: string | null;
      /** Format: date-span */
      totalUserTime?: string | null;
      /** Format: date-span */
      totalUserTimeOfOwner?: string | null;
      /** Format: date-span */
      timeHostingMoreThanOne?: string | null;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    StrangeWorldRegistrationResult: 200 | 501;
    /**
     * Format: int32
     * @enum {integer}
     */
    SummaryType: 0 | 1 | 2;
    UserToKick: {
      /** Format: uuid */
      userId?: string;
      reason?: string | null;
    };
    UsernameOrEmailAndPassword: {
      username?: string | null;
      email?: string | null;
      password?: string | null;
    };
    /** @description Response for channel join request */
    VoiceJoinTokenResult: {
      token?: string | null;
      channelId?: string | null;
    };
    /** @description Vivox login result, and info needed for vivox client */
    VoiceLoginTokenResult: {
      token?: string | null;
      accountId?: string | null;
      server?: string | null;
    };
  };
}

export interface operations {}

export interface external {}
