/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const ResetpasswordLazyImport = createFileRoute('/resetpassword')()
const RegisterLazyImport = createFileRoute('/register')()
const LogoutLazyImport = createFileRoute('/logout')()
const LoginLazyImport = createFileRoute('/login')()
const JobsLazyImport = createFileRoute('/jobs')()
const GameversionsLazyImport = createFileRoute('/gameversions')()
const ForgotLazyImport = createFileRoute('/forgot')()
const ContactLazyImport = createFileRoute('/contact')()
const BuyLazyImport = createFileRoute('/buy')()
const AdminLazyImport = createFileRoute('/admin')()
const AccountLazyImport = createFileRoute('/account')()
const IndexLazyImport = createFileRoute('/')()
const TermsTosLazyImport = createFileRoute('/terms/tos')()
const TermsEulaLazyImport = createFileRoute('/terms/eula')()

// Create/Update Routes

const ResetpasswordLazyRoute = ResetpasswordLazyImport.update({
  path: '/resetpassword',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/resetpassword.lazy').then((d) => d.Route))

const RegisterLazyRoute = RegisterLazyImport.update({
  path: '/register',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/register.lazy').then((d) => d.Route))

const LogoutLazyRoute = LogoutLazyImport.update({
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/logout.lazy').then((d) => d.Route))

const LoginLazyRoute = LoginLazyImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const JobsLazyRoute = JobsLazyImport.update({
  path: '/jobs',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/jobs.lazy').then((d) => d.Route))

const GameversionsLazyRoute = GameversionsLazyImport.update({
  path: '/gameversions',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/gameversions.lazy').then((d) => d.Route))

const ForgotLazyRoute = ForgotLazyImport.update({
  path: '/forgot',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/forgot.lazy').then((d) => d.Route))

const ContactLazyRoute = ContactLazyImport.update({
  path: '/contact',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/contact.lazy').then((d) => d.Route))

const BuyLazyRoute = BuyLazyImport.update({
  path: '/buy',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/buy.lazy').then((d) => d.Route))

const AdminLazyRoute = AdminLazyImport.update({
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/admin.lazy').then((d) => d.Route))

const AccountLazyRoute = AccountLazyImport.update({
  path: '/account',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/account.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const TermsTosLazyRoute = TermsTosLazyImport.update({
  path: '/terms/tos',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/terms/tos.lazy').then((d) => d.Route))

const TermsEulaLazyRoute = TermsEulaLazyImport.update({
  path: '/terms/eula',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/terms/eula.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/account': {
      preLoaderRoute: typeof AccountLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      preLoaderRoute: typeof AdminLazyImport
      parentRoute: typeof rootRoute
    }
    '/buy': {
      preLoaderRoute: typeof BuyLazyImport
      parentRoute: typeof rootRoute
    }
    '/contact': {
      preLoaderRoute: typeof ContactLazyImport
      parentRoute: typeof rootRoute
    }
    '/forgot': {
      preLoaderRoute: typeof ForgotLazyImport
      parentRoute: typeof rootRoute
    }
    '/gameversions': {
      preLoaderRoute: typeof GameversionsLazyImport
      parentRoute: typeof rootRoute
    }
    '/jobs': {
      preLoaderRoute: typeof JobsLazyImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      preLoaderRoute: typeof LogoutLazyImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      preLoaderRoute: typeof RegisterLazyImport
      parentRoute: typeof rootRoute
    }
    '/resetpassword': {
      preLoaderRoute: typeof ResetpasswordLazyImport
      parentRoute: typeof rootRoute
    }
    '/terms/eula': {
      preLoaderRoute: typeof TermsEulaLazyImport
      parentRoute: typeof rootRoute
    }
    '/terms/tos': {
      preLoaderRoute: typeof TermsTosLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexLazyRoute,
  AccountLazyRoute,
  AdminLazyRoute,
  BuyLazyRoute,
  ContactLazyRoute,
  ForgotLazyRoute,
  GameversionsLazyRoute,
  JobsLazyRoute,
  LoginLazyRoute,
  LogoutLazyRoute,
  RegisterLazyRoute,
  ResetpasswordLazyRoute,
  TermsEulaLazyRoute,
  TermsTosLazyRoute,
])

/* prettier-ignore-end */
